#BlueJ class context
comment0.target=FullScreenWindow
comment0.text=\r\n\ This\ class\ is\ used\ to\ create\ the\ fullscreen\ frame\ which\ displays\ the\ world\ image.\r\n\ The\ image\ that\ is\ send\ to\ this\ frame\ is\ passed\ on\ to\ the\ FullScreenBufferPanel\ where\ the\ image\ is\ printed.\r\n\ \r\n\ Mouse\ and\ key\ listeners\ are\ included\ into\ this\ frame.\r\n\ Because\ the\ greenfoot\ frame\ is\ not\ the\ active\ frame\ when\ you\ playing\ in\ fullscreen\ mode\ the\ methods\ Greenfoot.isKeyDown(String),\ Greenfoot.getMouseInfo(),\ (...)\ will\ not\ work.\r\n\ Instead\ you\ will\ have\ to\ use\ FullScreenWindow.isKeyDown(String)\ or\ FullScreenWindow.getMouseInfo()\ which\ work\ the\ same\ way\ like\ the\ greenfoot\ methods.\r\n\ \r\n\ All\ changed\ methods\ are\:\r\n\ \ -\ Greenfoot.isKeyDown(String)\r\n\ \ -\ Greenfoot.getKey()\r\n\ \ -\ Greenfoot.getMouseInfo()\r\n\ \ -\ Greenfoot.mouseClicked(Object\ obj)\r\n\ \ -\ Greenfoot.mouseDragged(Object\ obj)\r\n\ \ -\ Greenfoot.mouseDragEnded(Object\ obj)\r\n\ \ -\ Greenfoot.mouseMoved(Object\ obj)\r\n\ \ -\ Greenfoot.mousePressed(Object\ obj)\r\n\ \ \r\n\ All\ these\ methods\ need\ to\ be\ changed\ to\ FullScreenWindow.methodname\ to\ make\ the\ fullscreen\ mode\ work.\r\n\ These\ changes\ can\ be\ done\ by\ my\ Greenfoot\ Full\ Screen\ Rewriter\ scenario\ which\ does\ all\ the\ changes\ with\ only\ a\ fiew\ mouse\ clicks.\r\n\ \r\n\ \r\n\ @author\ Gevater_Tod4711\r\n\ @version\ 1.1\r\n
comment1.params=world
comment1.target=FullScreenWindow(FullScreenWorld)
comment1.text=\r\n\ Create\ a\ new\ FullScreenWindow\ with\ reference\ to\ the\ calling\ World\ object.\r\n
comment10.params=
comment10.target=void\ showGreenfootFrame()
comment10.text=\r\n\ Show\ the\ greenfoot\ frame\ so\ that\ it's\ visible\ again.\r\n
comment11.params=image\ cursorPoint
comment11.target=void\ setMouseCursor(java.awt.image.BufferedImage,\ java.awt.Point)
comment11.text=\r\n\ Set\ the\ mouse\ cursor\ for\ this\ frame.\r\n\ \r\n\ @param\ image\r\n\ \ \ \ \ \ The\ image\ of\ the\ new\ mouse\ cursor.\r\n\ \r\n\ @param\ cursorPoint\r\n\ \ \ \ \ \ The\ click\ point\ of\ the\ new\ cursor.\r\n
comment12.params=cursor
comment12.target=void\ setMouseCursor(java.awt.Cursor)
comment12.text=\r\n\ Set\ the\ mouse\ cursor\ for\ this\ frame.\r\n\ \r\n\ @param\ cursor\r\n\ \ \ \ \ \ The\ new\ cursor.\r\n
comment13.params=
comment13.target=void\ setMouseInfo()
comment13.text=\r\n\ Tell\ the\ fullscreenwindow\ to\ create\ a\ new\ FullScreenMouseInfo\ object.\r\n\ This\ object\ is\ stored\ for\ two\ acts\ to\ check\ whether\ the\ mouse\ is\ moved,\ clicked,\ ...\r\n
comment14.params=mouseEvent
comment14.target=void\ setLastMouseEvent(java.awt.event.MouseEvent)
comment14.text=\r\n\ Set\ the\ last\ occouring\ mouse\ event.\r\n\ \r\n\ @param\ mouseEvent\r\n\ \ \ \ \ \ The\ latest\ occouring\ MouseEvent\ object\ passed\ on\ by\ the\ mouse\ listener.\r\n
comment15.params=img
comment15.target=void\ setImage(java.awt.image.BufferedImage)
comment15.text=\r\n\ Set\ the\ currently\ displayed\ image.\r\n\ \r\n\ @param\ img\r\n\ \ \ \ \ \ The\ next\ displayed\ image.\r\n
comment16.params=keyInfo
comment16.target=void\ addKeyEvent(FullScreenKeyInfo)
comment16.text=\r\n\ Add\ a\ new\ FullScreenKeyInfo\ object\ to\ the\ key\ info\ queue\ when\ a\ key\ was\ pressed.\r\n
comment17.params=keyInfo
comment17.target=void\ deleteKeyEvent(FullScreenKeyInfo)
comment17.text=\r\n\ Delete\ a\ FullScreenKeyInfo\ object\ from\ the\ key\ info\ queue\ when\ the\ key\ was\ released.\r\n
comment18.params=
comment18.target=void\ deleteAllKeyEvents()
comment18.text=\r\n\ Clear\ the\ whole\ key\ info\ queue.\r\n
comment19.params=obj
comment19.target=boolean\ mouseClicked(java.lang.Object)
comment19.text=\r\n\ True\ if\ the\ mouse\ has\ been\ clicked\ (pressed\ and\ released)\ on\ the\ given\ object.\r\n\ If\ the\ parameter\ is\ an\ Actor\ the\ method\ will\ only\ return\ true\ if\ the\ mouse\ has\ been\ clicked\ on\ the\ given\ actor.\r\n\ If\ there\ are\ several\ actors\ at\ the\ same\ place,\ only\ the\ top\ most\ actor\ will\ receive\ the\ click.\r\n\ If\ the\ parameter\ is\ a\ World\ then\ true\ will\ be\ returned\ if\ the\ mouse\ was\ clicked\ on\ the\ world\ background.\r\n\ If\ the\ parameter\ is\ null,\ then\ true\ will\ be\ returned\ for\ any\ click,\ independent\ of\ the\ target\ clicked\ on.\r\n\ \r\n\ @param\ obj\r\n\ \ \ \ \ \ Typically\ one\ of\ Actor,\ World\ or\ null.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ true\ if\ the\ mouse\ has\ been\ clicked\ as\ explained\ above.\r\n
comment2.params=arg0
comment2.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment20.params=isMouseClicked
comment20.target=void\ setMouseClicked(boolean)
comment20.text=\r\n\ Set\ the\ current\ mouseClicked\ state.\r\n\ This\ method\ is\ called\ from\ the\ GreenfootKeyListener\ object\ when\ the\ mouse\ has\ been\ clicked.\r\n\ \r\n\ @param\ isMouseClicked\r\n\ \ \ \ \ \ The\ new\ mouse\ state.\r\n
comment21.params=obj
comment21.target=boolean\ mouseDragged(java.lang.Object)
comment21.text=\r\n\ True\ if\ the\ mouse\ is\ currently\ being\ dragged\ on\ the\ given\ object.\r\n\ The\ mouse\ is\ considered\ to\ be\ dragged\ on\ an\ object\ if\ the\ drag\ started\ on\ that\ object\ -\ even\ if\ the\ mouse\ has\ since\ been\ moved\ outside\ of\ that\ object.\r\n\ If\ the\ parameter\ is\ an\ Actor\ the\ method\ will\ only\ return\ true\ if\ the\ drag\ started\ on\ the\ given\ actor.\r\n\ If\ there\ are\ several\ actors\ at\ the\ same\ place,\ only\ the\ top\ most\ actor\ will\ receive\ the\ drag.\r\n\ If\ the\ parameter\ is\ a\ World\ then\ true\ will\ be\ returned\ if\ the\ drag\ action\ was\ started\ on\ the\ world\ background.\r\n\ If\ the\ parameter\ is\ null,\ then\ true\ will\ be\ returned\ for\ any\ drag\ action,\ independent\ of\ the\ target\ clicked\ on.\r\n\ \r\n\ @param\ obj\r\n\ \ \ \ \ \ Typically\ one\ of\ Actor,\ World\ or\ null.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ true\ if\ the\ mouse\ has\ been\ dragged\ as\ explained\ above.\r\n
comment22.params=isMouseDragged
comment22.target=void\ setMouseDragged(boolean)
comment22.text=\r\n\ Set\ the\ current\ mouseDragged\ state.\r\n\ This\ method\ is\ called\ from\ the\ GreenfootKeyListener\ object\ when\ the\ mouse\ has\ been\ dragged.\r\n\ \r\n\ @param\ isMouseDragged\r\n\ \ \ \ \ \ The\ new\ mouse\ state.\r\n
comment23.params=obj
comment23.target=boolean\ mouseDragEnded(java.lang.Object)
comment23.text=\r\n\ True\ if\ a\ mouse\ drag\ has\ ended.\r\n\ This\ happens\ when\ the\ mouse\ has\ been\ dragged\ and\ the\ mouse\ button\ released.\r\n\ If\ the\ parameter\ is\ an\ Actor\ the\ method\ will\ only\ return\ true\ if\ the\ drag\ started\ on\ the\ given\ actor.\r\n\ If\ there\ are\ several\ actors\ at\ the\ same\ place,\ only\ the\ top\ most\ actor\ will\ receive\ the\ drag.\r\n\ If\ the\ parameter\ is\ a\ World\ then\ true\ will\ be\ returned\ if\ the\ drag\ action\ was\ started\ on\ the\ world\ background.\r\n\ If\ the\ parameter\ is\ null,\ then\ true\ will\ be\ returned\ for\ any\ drag\ action,\ independent\ of\ the\ target\ clicked\ on.\ \r\n\ \r\n\ @param\ obj\r\n\ \ \ \ \ \ Typically\ one\ of\ Actor,\ World\ or\ null.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ true\ if\ the\ mouse\ has\ been\ dragged\ as\ explained\ above.\r\n
comment24.params=isMouseDragEnded
comment24.target=void\ setMouseDragEnded(boolean)
comment24.text=\r\n\ Set\ the\ current\ mouseDragEnded\ state.\r\n\ This\ method\ is\ called\ from\ the\ GreenfootKeyListener\ object\ when\ the\ mouse\ dragg\ has\ ended.\r\n\ \r\n\ @param\ isMouseDragEnded\r\n\ \ \ \ \ \ The\ new\ mouse\ state.\r\n
comment25.params=obj
comment25.target=boolean\ mouseMoved(java.lang.Object)
comment25.text=\r\n\ True\ if\ the\ mouse\ has\ been\ moved\ on\ the\ given\ object.\r\n\ The\ mouse\ is\ considered\ to\ be\ moved\ on\ an\ object\ if\ the\ mouse\ pointer\ is\ above\ that\ object.\r\n\ If\ the\ parameter\ is\ an\ Actor\ the\ method\ will\ only\ return\ true\ if\ the\ move\ is\ on\ the\ given\ actor.\r\n\ If\ there\ are\ several\ actors\ at\ the\ same\ place,\ only\ the\ top\ most\ actor\ will\ receive\ the\ move.\r\n\ If\ the\ parameter\ is\ a\ World\ then\ true\ will\ be\ returned\ if\ the\ move\ was\ on\ the\ world\ background.\r\n\ If\ the\ parameter\ is\ null,\ then\ true\ will\ be\ returned\ for\ any\ move,\ independent\ of\ the\ target\ under\ the\ move\ location.\r\n\ \r\n\ @param\ obj\r\n\ \ \ \ \ \ Typically\ one\ of\ Actor,\ World\ or\ null.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ True\ if\ the\ mouse\ has\ been\ moved\ as\ explained\ above.\r\n
comment26.params=obj
comment26.target=boolean\ mousePressed(java.lang.Object)
comment26.text=\r\n\ True\ if\ the\ mouse\ has\ been\ pressed\ (changed\ from\ a\ non-pressed\ state\ to\ being\ pressed)\ on\ the\ given\ object.\r\n\ If\ the\ parameter\ is\ an\ Actor\ the\ method\ will\ only\ return\ true\ if\ the\ mouse\ has\ been\ pressed\ on\ the\ given\ actor.\r\n\ If\ there\ are\ several\ actors\ at\ the\ same\ place,\ only\ the\ top\ most\ actor\ will\ receive\ the\ press.\r\n\ If\ the\ parameter\ is\ a\ World\ then\ true\ will\ be\ returned\ if\ the\ mouse\ was\ pressed\ on\ the\ world\ background.\r\n\ If\ the\ parameter\ is\ null,\ then\ true\ will\ be\ returned\ for\ any\ mouse\ press,\ independent\ of\ the\ target\ pressed\ on.\r\n\ \r\n\ @param\ obj\r\n\ \ \ \ \ \ Typically\ one\ of\ Actor,\ World\ or\ null.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ True\ if\ the\ mouse\ has\ been\ pressed\ as\ explained\ above.\r\n
comment27.params=isMousePressed
comment27.target=void\ setMousePressed(boolean)
comment27.text=\r\n\ Set\ the\ current\ mousePressed\ state.\r\n\ This\ method\ is\ called\ from\ the\ GreenfootKeyListener\ object\ when\ the\ mouse\ has\ been\ pressed.\r\n\ \r\n\ @param\ isMousePressed\r\n\ \ \ \ \ \ The\ new\ mouse\ state.\r\n
comment3.params=e
comment3.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment4.params=
comment4.target=void\ startWindowControllThread()
comment5.params=keyName
comment5.target=boolean\ isKeyDown(java.lang.String)
comment5.text=\r\n\ Check\ whether\ a\ given\ key\ is\ currently\ pressed\ down.\r\n\ \r\n\ @param\ keyName\ \r\n\ \ \ \ \ \ The\ name\ of\ the\ key\ to\ check.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ true\ if\ the\ key\ is\ currently\ pressed\ down.\r\n
comment6.params=
comment6.target=java.lang.String\ getKey()
comment6.text=\r\n\ Get\ the\ most\ recently\ pressed\ key,\ since\ the\ last\ time\ this\ method\ was\ called.\r\n\ If\ no\ key\ was\ pressed\ since\ this\ method\ was\ last\ called,\ it\ will\ return\ null.\r\n\ If\ more\ than\ one\ key\ was\ pressed,\ this\ returns\ only\ the\ most\ recently\ pressed\ key.\r\n\ \ \ \r\n\ @return\r\n\ \ \ \ \ \ The\ name\ of\ the\ most\ recently\ pressed\ key.\r\n
comment7.params=
comment7.target=FullScreenMouseInfo\ getMouseInfo()
comment7.text=\r\n\ Return\ a\ FullScreenMouseInfo\ object\ with\ information\ about\ the\ mouse\ state.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ The\ info\ about\ the\ current\ state\ of\ the\ mouse,\ or\ null\ if\ the\ mouse\ cursor\ is\ outside\ the\ world\ boundary\ (unless\ being\ dragged).\r\n
comment8.params=
comment8.target=FullScreenWorld\ getDisplayedWorld()
comment8.text=\r\n\ Get\ the\ reference\ to\ the\ world\ that\ is\ currently\ displayed.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ The\ reference\ to\ the\ world\ that\ is\ displayed.\r\n
comment9.params=
comment9.target=void\ hideGreenfootFrame()
comment9.text=\r\n\ Hide\ the\ greenfoot\ frame\ so\ that\ the\ fullscreen\ window\ is\ the\ only\ visible\ frame.\r\n
numComments=28
