#BlueJ class context
comment0.target=GreenfootToolkit
comment0.text=\r\n\ Write\ a\ description\ of\ class\ GreenfootToolkit\ here.\r\n\ \r\n\ @author\ Gevater_Tod4711\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=
comment1.target=GreenfootToolkit()
comment10.params=stringNumber\ addToExistingFile\ splitUpText\ info\ fileText
comment10.target=void\ saveUserInfoFile(int,\ boolean,\ boolean,\ greenfoot.UserInfo,\ java.lang.String[])
comment10.text=\r\n\ Saves\ the\ Strings\ given\ as\ the\ fifth\ to\ the\ last\ parameter\ in\ the\ given\ String\ of\ the\ userInfo.\r\n\ \r\n\ @param\ stringNumber\r\n\ \ \ \ \ \ The\ number\ of\ the\ UserInfos\ String\ where\ this\ Strings\ should\ be\ saved.\ There\ are\ 10\ Strings\ in\ the\ UserInfo\ so\ the\ value\ has\ to\ be\ 1\ -\ 10.\r\n\ \r\n\ @param\ addToExistingFile\r\n\ \ \ \ \ \ If\ you\ want\ to\ add\ the\ text\ to\ an\ existing\ UserInfo\ String\ this\ variable\ has\ to\ be\ true;\r\n\ \r\n\ @param\ splitUpText\r\n\ \ \ \ \ \ One\ String\ each\ of\ the\ UserInfo\ can\ at\ most\ save\ 50\ characters.\ If\ you\ want\ your\ text\ to\ be\ splited\ up\ if\ it's\ to\ long\ this\ value\ has\ to\ be\ true.\r\n\ \r\n\ @param\ info\r\n\ \ \ \ \ \ The\ UserInfo\ object\ there\ the\ Strings\ should\ be\ saved.\ If\ this\ parameter\ is\ null\ the\ current\ UserInfo\ is\ taken\ if\ it's\ avaliable.\r\n\ \r\n\ @param\ fileText\r\n\ \ \ \ \ \ The\ strings\ that\ should\ be\ saved\ in\ the\ UserInfo\ Strings.\r\n
comment11.params=stringNumber\ addToExistingFile\ splitUpText\ info\ fileText
comment11.target=void\ saveUserInfoFile(int,\ boolean,\ boolean,\ greenfoot.UserInfo,\ java.util.List)
comment11.text=\r\n\ Saves\ the\ Strings\ given\ as\ the\ fifth\ to\ the\ last\ parameter\ in\ the\ given\ String\ of\ the\ userInfo.\r\n\ \r\n\ @param\ stringNumber\r\n\ \ \ \ \ \ The\ number\ of\ the\ UserInfos\ String\ where\ this\ Strings\ should\ be\ saved.\ There\ are\ 10\ Strings\ in\ the\ UserInfo\ so\ the\ value\ has\ to\ be\ 1\ -\ 10.\r\n\ \r\n\ @param\ addToExistingFile\r\n\ \ \ \ \ \ If\ you\ want\ to\ add\ the\ text\ to\ an\ existing\ UserInfo\ String\ this\ variable\ has\ to\ be\ true;\r\n\ \r\n\ @param\ splitUpText\r\n\ \ \ \ \ \ One\ String\ each\ of\ the\ UserInfo\ can\ at\ most\ save\ 50\ characters.\ If\ you\ want\ your\ text\ to\ be\ splited\ up\ if\ it's\ to\ long\ this\ value\ has\ to\ be\ true.\r\n\ \r\n\ @param\ info\r\n\ \ \ \ \ \ The\ UserInfo\ object\ there\ the\ Strings\ should\ be\ saved.\ If\ this\ parameter\ is\ null\ the\ current\ UserInfo\ is\ taken\ if\ it's\ avaliable.\r\n\ \r\n\ @param\ fileText\r\n\ \ \ \ \ \ The\ strings\ that\ should\ be\ saved\ in\ the\ UserInfo\ Strings.\r\n
comment12.params=stringNumber\ splitedText\ info
comment12.target=java.util.List\ loadUserInfoFile(int,\ boolean,\ greenfoot.UserInfo)
comment12.text=\r\n\ Loads\ the\ text\ of\ the\ UserInfo\ Strings\ whith\ the\ given\ filename.\r\n\ \r\n\ @param\ stringNumber\r\n\ \ \ \ \ \ The\ number\ of\ the\ String\ that\ should\ be\ loaded.\r\n\ \r\n\ @param\ splitedText\r\n\ \ \ \ \ \ If\ the\ text\ is\ splited\ into\ more\ strings,\ because\ a\ UserInfo\ String\ can\ at\ most\ save\ 50\ characters,\ this\ parameter\ has\ to\ be\ true\ to\ load\ the\ whole\ text.\r\n\ \r\n\ @param\ info\r\n\ \ \ \ \ \ The\ UserInfo\ object\ there\ the\ Strings\ should\ be\ saved.\ If\ this\ parameter\ is\ null\ the\ current\ UserInfo\ is\ taken\ if\ it's\ avaliable.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ list\ of\ Strings\ consisting\ of\ the\ text\ of\ the\ file.\r\n\ \ \ \ \ \ Each\ line\ of\ the\ file\ is\ a\ new\ element\ of\ the\ list.\r\n
comment13.params=actor\ x\ y
comment13.target=double\ getAbsoluteDistance(greenfoot.Actor,\ double,\ double)
comment13.text=\r\n\ Calculates\ the\ distance\ between\ the\ given\ actors\ location\ and\ the\ values\ for\ x\ and\ y.\r\n\ \r\n\ @param\ actor\r\n\ \ \ \ \ \ The\ Actor\ which\ location\ is\ the\ first\ point.\r\n\ \r\n\ @param\ x\r\n\ \ \ \ \ \ The\ x\ coordinate\ of\ the\ point\ that\ is\ the\ second\ checked\ point.\r\n\ \r\n\ @param\ y\r\n\ \ \ \ \ \ The\ y\ coordinate\ of\ the\ point\ that\ is\ the\ second\ checked\ point.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ The\ distance\ between\ the\ actor\ and\ the\ point\ as\ a\ double\ value.\r\n\ \r\n\ @throws\ \r\n\ \ \ \ \ \ NullPointerException\ is\ thrown\ if\ the\ actor\ is\ null.\r\n
comment14.params=deltaX\ deltaY
comment14.target=double\ getRelativeDistance(double,\ double)
comment14.text=\r\n\ Calculates\ the\ distance\ of\ the\ given\ distances\ in\ x\ and\ y\ direction.\r\n\ \r\n\ @param\r\n\ \ \ \ \ \ The\ x\ distance\ between\ the\ two\ points.\r\n\ \r\n\ @param\r\n\ \ \ \ \ \ The\ y\ distance\ between\ the\ two\ points.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ The\ calculated\ distance\ as\ a\ double\ value.\r\n
comment15.params=a\ b
comment15.target=double\ getObjectsDistance(greenfoot.Actor,\ greenfoot.Actor)
comment15.text=\r\n\ Calculates\ the\ distance\ between\ two\ Actors.\r\n\ \r\n\ @param\ a\r\n\ \ \ \ \ \ The\ first\ Actor.\r\n\ \r\n\ @param\ b\r\n\ \ \ \ \ \ The\ second\ Actor.\r\n\ \ \ \ \ \ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ the\ distance\ between\ the\ two\ Actors\ as\ a\ double\ value.\r\n
comment16.params=p1\ p2
comment16.target=double\ getPointsDistance(java.awt.Point,\ java.awt.Point)
comment16.text=\r\n\ Calculates\ the\ distance\ between\ two\ Points.\r\n\ \r\n\ @param\ p1\r\n\ \ \ \ \ \ The\ first\ Point.\r\n\ \r\n\ @param\ p2\r\n\ \ \ \ \ \ The\ second\ Point.\r\n\ \ \ \ \ \ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ the\ distance\ between\ the\ two\ Points\ as\ a\ double\ value.\r\n
comment17.params=img\ size
comment17.target=void\ scaleImage(greenfoot.GreenfootImage,\ double)
comment17.text=\r\n\ Scales\ the\ image\ to\ the\ given\ size.\r\n\ \r\n\ @param\ img\r\n\ \ \ \ \ \ The\ GreenfootImage\ that\ should\ be\ scaled.\r\n\ \r\n\ @param\ size\r\n\ \ \ \ \ \ The\ new\ size\ of\ the\ image\ as\ a\ percent\ value.\r\n
comment18.params=actor\ img
comment18.target=void\ changeImage(greenfoot.Actor,\ greenfoot.GreenfootImage)
comment18.text=\r\n\ Change\ the\ image\ of\ an\ Actor\ the\ the\ given\ GreenfootImage.\r\n\ \r\n\ @param\ actor\r\n\ \ \ \ \ \ The\ Actor\ which\ image\ is\ changed.\r\n\ \r\n\ @param\ img\r\n\ \ \ \ \ \ The\ new\ image\ of\ the\ Actor.\r\n
comment19.params=radius\ percentValues\ colors
comment19.target=greenfoot.GreenfootImage\ createPieChart(int,\ double[],\ java.awt.Color[])
comment19.text=\r\n\ Create\ a\ pie\ chart\ with\ the\ given\ values\ for\ the\ radius,\ the\ percentValues,\ the\ colors...\r\n\ \r\n\ @param\ radius\r\n\ \ \ \ \ \ The\ radius\ of\ the\ pie\ chart\ that\ is\ created.\r\n\ \r\n\ @param\ percentValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ part\ of\ the\ pie\ chart\ as\ percent\ values.\r\n\ \r\n\ @param\ colors\r\n\ \ \ \ \ \ The\ colors\ for\ each\ part\ of\ the\ pie\ chart.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ pie\ chart\ calculated\ by\ the\ given\ values.\r\n
comment2.params=
comment2.target=GreenfootToolkit\ getToolkit()
comment20.params=radius\ percentValues\ colors\ legend
comment20.target=greenfoot.GreenfootImage\ createPieChart(int,\ double[],\ java.awt.Color[],\ java.lang.String[])
comment20.text=\r\n\ Create\ a\ pie\ chart\ with\ the\ given\ values\ for\ the\ radius,\ the\ percentValues,\ the\ colors...\r\n\ \r\n\ @param\ radius\r\n\ \ \ \ \ \ The\ radius\ of\ the\ pie\ chart\ that\ is\ created.\r\n\ \r\n\ @param\ percentValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ part\ of\ the\ pie\ chart\ as\ percent\ values.\r\n\ \r\n\ @param\ colors\r\n\ \ \ \ \ \ The\ colors\ for\ each\ part\ of\ the\ pie\ chart.\r\n\ \r\n\ @param\ legend\r\n\ \ \ \ \ \ The\ names\ of\ each\ field\ for\ the\ legend.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ pie\ chart\ calculated\ by\ the\ given\ values.\r\n
comment21.params=radius\ percentValues\ colors\ legend\ backgroundColor
comment21.target=greenfoot.GreenfootImage\ createPieChart(int,\ double[],\ java.awt.Color[],\ java.lang.String[],\ java.awt.Color)
comment21.text=\r\n\ Create\ a\ pie\ chart\ with\ the\ given\ values\ for\ the\ radius,\ the\ percentValues,\ the\ colors...\r\n\ \r\n\ @param\ radius\r\n\ \ \ \ \ \ The\ radius\ of\ the\ pie\ chart\ that\ is\ created.\r\n\ \r\n\ @param\ percentValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ part\ of\ the\ pie\ chart\ as\ percent\ values.\r\n\ \r\n\ @param\ colors\r\n\ \ \ \ \ \ The\ colors\ for\ each\ part\ of\ the\ pie\ chart.\r\n\ \r\n\ @param\ legend\r\n\ \ \ \ \ \ The\ names\ of\ each\ field\ for\ the\ legend.\r\n\ \r\n\ @param\ backgroundColor\r\n\ \ \ \ \ \ The\ background\ color\ of\ the\ whole\ chart.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ pie\ chart\ calculated\ by\ the\ given\ values.\r\n
comment22.params=radius\ percentValues\ colors\ legend\ backgroundColor\ textColor
comment22.target=greenfoot.GreenfootImage\ createPieChart(int,\ double[],\ java.awt.Color[],\ java.lang.String[],\ java.awt.Color,\ java.awt.Color)
comment22.text=\r\n\ Create\ a\ pie\ chart\ with\ the\ given\ values\ for\ the\ radius,\ the\ percentValues,\ the\ colors...\r\n\ \r\n\ @param\ radius\r\n\ \ \ \ \ \ The\ radius\ of\ the\ pie\ chart\ that\ is\ created.\r\n\ \r\n\ @param\ percentValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ part\ of\ the\ pie\ chart\ as\ percent\ values.\r\n\ \r\n\ @param\ colors\r\n\ \ \ \ \ \ The\ colors\ for\ each\ part\ of\ the\ pie\ chart.\r\n\ \r\n\ @param\ legend\r\n\ \ \ \ \ \ The\ names\ of\ each\ field\ for\ the\ legend.\r\n\ \r\n\ @param\ backgroundColor\r\n\ \ \ \ \ \ The\ background\ color\ of\ the\ whole\ chart.\r\n\ \r\n\ @param\ textColor\r\n\ \ \ \ \ \ The\ text\ color\ of\ the\ legend.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ pie\ chart\ calculated\ by\ the\ given\ values.\r\n
comment23.params=radius\ percentValues\ colors\ legend\ displayValues\ backgroundColor
comment23.target=greenfoot.GreenfootImage\ createPieChart(int,\ double[],\ java.awt.Color[],\ java.lang.String[],\ boolean,\ java.awt.Color)
comment23.text=\r\n\ Create\ a\ pie\ chart\ with\ the\ given\ values\ for\ the\ radius,\ the\ percentValues,\ the\ colors...\r\n\ \r\n\ @param\ radius\r\n\ \ \ \ \ \ The\ radius\ of\ the\ pie\ chart\ that\ is\ created.\r\n\ \r\n\ @param\ percentValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ part\ of\ the\ pie\ chart\ as\ percent\ values.\r\n\ \r\n\ @param\ colors\r\n\ \ \ \ \ \ The\ colors\ for\ each\ part\ of\ the\ pie\ chart.\r\n\ \r\n\ @param\ legend\r\n\ \ \ \ \ \ The\ names\ of\ each\ field\ for\ the\ legend.\r\n\ \r\n\ @param\ displayValues\r\n\ \ \ \ \ \ You\ can\ choose\ whether\ the\ values\ should\ be\ displayed\ or\ not.\r\n\ \r\n\ @param\ backgroundColor\r\n\ \ \ \ \ \ The\ background\ color\ of\ the\ whole\ chart.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ pie\ chart\ calculated\ by\ the\ given\ values.\r\n
comment24.params=radius\ percentValues\ colors\ legend\ displayValues\ backgroundColor\ textColor
comment24.target=greenfoot.GreenfootImage\ createPieChart(int,\ double[],\ java.awt.Color[],\ java.lang.String[],\ boolean,\ java.awt.Color,\ java.awt.Color)
comment24.text=\r\n\ Create\ a\ pie\ chart\ with\ the\ given\ values\ for\ the\ radius,\ the\ percentValues,\ the\ colors...\r\n\ \r\n\ @param\ radius\r\n\ \ \ \ \ \ The\ radius\ of\ the\ pie\ chart\ that\ is\ created.\r\n\ \r\n\ @param\ percentValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ part\ of\ the\ pie\ chart\ as\ percent\ values.\r\n\ \r\n\ @param\ colors\r\n\ \ \ \ \ \ The\ colors\ for\ each\ part\ of\ the\ pie\ chart.\r\n\ \r\n\ @param\ legend\r\n\ \ \ \ \ \ The\ names\ of\ each\ field\ for\ the\ legend.\r\n\ \r\n\ @param\ displayValues\r\n\ \ \ \ \ \ You\ can\ choose\ whether\ the\ values\ should\ be\ displayed\ or\ not.\r\n\ \r\n\ @param\ backgroundColor\r\n\ \ \ \ \ \ The\ background\ color\ of\ the\ whole\ chart.\r\n\ \r\n\ @param\ textColor\r\n\ \ \ \ \ \ The\ text\ color\ of\ the\ legend.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ pie\ chart\ calculated\ by\ the\ given\ values.\r\n
comment25.params=radius\ percentValues\ colors\ legend\ displayValues\ backgroundColor\ textColor\ frameColor\ frameWidth
comment25.target=greenfoot.GreenfootImage\ createPieChart(int,\ double[],\ java.awt.Color[],\ java.lang.String[],\ boolean,\ java.awt.Color,\ java.awt.Color,\ java.awt.Color,\ int)
comment25.text=\r\n\ Create\ a\ pie\ chart\ with\ the\ given\ values\ for\ the\ radius,\ the\ percentValues,\ the\ colors...\r\n\ \r\n\ @param\ radius\r\n\ \ \ \ \ \ The\ radius\ of\ the\ pie\ chart\ that\ is\ created.\r\n\ \r\n\ @param\ percentValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ part\ of\ the\ pie\ chart\ as\ percent\ values.\r\n\ \r\n\ @param\ colors\r\n\ \ \ \ \ \ The\ colors\ for\ each\ part\ of\ the\ pie\ chart.\r\n\ \r\n\ @param\ legend\r\n\ \ \ \ \ \ The\ names\ of\ each\ field\ for\ the\ chart.\r\n\ \r\n\ @param\ displayValues\r\n\ \ \ \ \ \ You\ can\ choose\ whether\ the\ values\ should\ be\ displayed\ or\ not.\r\n\ \r\n\ @param\ backgroundColor\r\n\ \ \ \ \ \ The\ background\ color\ of\ the\ whole\ chart.\r\n\ \r\n\ @param\ textColor\r\n\ \ \ \ \ \ The\ text\ color\ of\ the\ legend.\r\n\ \r\n\ @param\ frameColor\r\n\ \ \ \ \ \ The\ color\ of\ the\ frame\ (if\ there\ is\ one).\r\n\ \r\n\ @param\ frameWidth\r\n\ \ \ \ \ \ The\ width\ of\ the\ frame\ (0\ \=\ no\ frame).\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ pie\ chart\ calculated\ by\ the\ given\ values.\r\n
comment26.params=maxValue\ absoluteValues\ colors\ legend\ width\ height
comment26.target=greenfoot.GreenfootImage\ createBarChart(double,\ double[],\ java.awt.Color[],\ java.lang.String[],\ int,\ int)
comment26.text=\r\n\ Creates\ a\ bar\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ colors,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ bar\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ bar\ of\ the\ bar\ chart\ as\ absolute\ values.\r\n\ \r\n\ @param\ colors\r\n\ \ \ \ \ \ The\ colors\ for\ each\ bar\ of\ the\ bar\ chart.\r\n\ \r\n\ @param\ legend\r\n\ \ \ \ \ \ The\ names\ of\ each\ bar\ for\ the\ chart.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ bar\ chart\ calculated\ by\ the\ given\ values.\r\n
comment27.params=maxValue\ absoluteValues\ colors\ legend\ width\ height\ textColor
comment27.target=greenfoot.GreenfootImage\ createBarChart(double,\ double[],\ java.awt.Color[],\ java.lang.String[],\ int,\ int,\ java.awt.Color)
comment27.text=\r\n\ Creates\ a\ bar\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ colors,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ bar\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ bar\ of\ the\ bar\ chart\ as\ absolute\ values.\r\n\ \r\n\ @param\ colors\r\n\ \ \ \ \ \ The\ colors\ for\ each\ bar\ of\ the\ bar\ chart.\r\n\ \r\n\ @param\ legend\r\n\ \ \ \ \ \ The\ names\ of\ each\ bar\ for\ the\ chart.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ textColor\r\n\ \ \ \ \ \ The\ text\ color\ of\ the\ legend.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ bar\ chart\ calculated\ by\ the\ given\ values.\r\n
comment28.params=maxValue\ absoluteValues\ colors\ legend\ displayValues\ width\ height
comment28.target=greenfoot.GreenfootImage\ createBarChart(double,\ double[],\ java.awt.Color[],\ java.lang.String[],\ boolean,\ int,\ int)
comment28.text=\r\n\ Creates\ a\ bar\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ colors,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ bar\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ bar\ of\ the\ bar\ chart\ as\ absolute\ values.\r\n\ \r\n\ @param\ colors\r\n\ \ \ \ \ \ The\ colors\ for\ each\ bar\ of\ the\ bar\ chart.\r\n\ \r\n\ @param\ legend\r\n\ \ \ \ \ \ The\ names\ of\ each\ bar\ for\ the\ chart.\r\n\ \r\n\ @param\ displayValues\r\n\ \ \ \ \ \ You\ can\ choose\ whether\ the\ values\ should\ be\ displayed\ or\ not.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ bar\ chart\ calculated\ by\ the\ given\ values.\r\n
comment29.params=maxValue\ absoluteValues\ colors\ legend\ displayValues\ width\ height\ backgroundColor
comment29.target=greenfoot.GreenfootImage\ createBarChart(double,\ double[],\ java.awt.Color[],\ java.lang.String[],\ boolean,\ int,\ int,\ java.awt.Color)
comment29.text=\r\n\ Creates\ a\ bar\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ colors,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ bar\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ bar\ of\ the\ bar\ chart\ as\ absolute\ values.\r\n\ \r\n\ @param\ colors\r\n\ \ \ \ \ \ The\ colors\ for\ each\ bar\ of\ the\ bar\ chart.\r\n\ \r\n\ @param\ legend\r\n\ \ \ \ \ \ The\ names\ of\ each\ bar\ for\ the\ chart.\r\n\ \r\n\ @param\ displayValues\r\n\ \ \ \ \ \ You\ can\ choose\ whether\ the\ values\ should\ be\ displayed\ or\ not.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ backgroundColor\r\n\ \ \ \ \ \ The\ background\ color\ of\ the\ whole\ chart.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ bar\ chart\ calculated\ by\ the\ given\ values.\r\n
comment3.params=filename\ addToExistingFile\ fileText
comment3.target=boolean\ saveFile(java.lang.String,\ boolean,\ java.lang.String[])
comment3.text=\r\n\ Saves\ the\ Strings\ given\ as\ the\ second\ to\ the\ last\ parameter\ in\ the\ file\ named\ like\ given\ in\ filename.\r\n\ \r\n\ @param\ filename\r\n\ \ \ \ \ \ The\ name\ of\ the\ file\ where\ the\ Strings\ should\ be\ saved.\r\n\ \r\n\ @param\ addToExistingFile\r\n\ \ \ \ \ \ If\ you\ want\ to\ add\ the\ text\ to\ an\ existing\ file\ this\ variable\ has\ to\ be\ true;\r\n\ \r\n\ @param\ fileText\r\n\ \ \ \ \ \ The\ strings\ that\ should\ be\ saved\ in\ the\ file.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ true\ if\ the\ file\ was\ successfully\ createt.\ False\ if\ not.\r\n
comment30.params=maxValue\ absoluteValues\ colors\ legend\ displayValues\ width\ height\ backgroundColor\ textColor
comment30.target=greenfoot.GreenfootImage\ createBarChart(double,\ double[],\ java.awt.Color[],\ java.lang.String[],\ boolean,\ int,\ int,\ java.awt.Color,\ java.awt.Color)
comment30.text=\r\n\ Creates\ a\ bar\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ colors,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ bar\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ bar\ of\ the\ bar\ chart\ as\ absolute\ values.\r\n\ \r\n\ @param\ colors\r\n\ \ \ \ \ \ The\ colors\ for\ each\ bar\ of\ the\ bar\ chart.\r\n\ \r\n\ @param\ legend\r\n\ \ \ \ \ \ The\ names\ of\ each\ bar\ for\ the\ chart.\r\n\ \r\n\ @param\ displayValues\r\n\ \ \ \ \ \ You\ can\ choose\ whether\ the\ values\ should\ be\ displayed\ or\ not.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ backgroundColor\r\n\ \ \ \ \ \ The\ background\ color\ of\ the\ whole\ chart.\r\n\ \r\n\ @param\ textColor\r\n\ \ \ \ \ \ The\ text\ color\ of\ the\ legend.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ bar\ chart\ calculated\ by\ the\ given\ values.\r\n
comment31.params=maxValue\ absoluteValues\ colors\ legend\ displayValues\ width\ height\ backgroundColor\ textColor\ frameColor\ frameWidth
comment31.target=greenfoot.GreenfootImage\ createBarChart(double,\ double[],\ java.awt.Color[],\ java.lang.String[],\ boolean,\ int,\ int,\ java.awt.Color,\ java.awt.Color,\ java.awt.Color,\ int)
comment31.text=\r\n\ Creates\ a\ bar\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ colors,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ bar\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ bar\ of\ the\ bar\ chart\ as\ absolute\ values.\r\n\ \r\n\ @param\ colors\r\n\ \ \ \ \ \ The\ colors\ for\ each\ bar\ of\ the\ bar\ chart.\r\n\ \r\n\ @param\ legend\r\n\ \ \ \ \ \ The\ names\ of\ each\ bar\ for\ the\ chart.\r\n\ \r\n\ @param\ displayValues\r\n\ \ \ \ \ \ You\ can\ choose\ whether\ the\ values\ should\ be\ displayed\ or\ not.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ backgroundColor\r\n\ \ \ \ \ \ The\ background\ color\ of\ the\ whole\ chart.\r\n\ \r\n\ @param\ textColor\r\n\ \ \ \ \ \ The\ text\ color\ of\ the\ legend.\r\n\ \r\n\ @param\ frameColor\r\n\ \ \ \ \ \ The\ color\ of\ the\ frame\ (if\ there\ is\ one).\r\n\ \r\n\ @param\ frameWidth\r\n\ \ \ \ \ \ The\ width\ of\ the\ frame\ (0\ \=\ no\ frame).\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ bar\ chart\ calculated\ by\ the\ given\ values.\r\n
comment32.params=maxValue\ absoluteValues\ width\ height
comment32.target=greenfoot.GreenfootImage\ createLineChart(double,\ java.awt.Point[],\ int,\ int)
comment32.text=\r\n\ Creates\ a\ line\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ colors,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ line\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ point\ of\ the\ line\ chart\ as\ absolute\ values.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ line\ chart\ calculated\ by\ the\ given\ values.\r\n
comment33.params=maxValue\ absoluteValues\ width\ height\ lineColor
comment33.target=greenfoot.GreenfootImage\ createLineChart(double,\ java.awt.Point[],\ int,\ int,\ java.awt.Color)
comment33.text=\r\n\ Creates\ a\ line\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ colors,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ line\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ point\ of\ the\ line\ chart\ as\ absolute\ values.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ lineColor\r\n\ \ \ \ \ \ The\ color\ of\ the\ line.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ line\ chart\ calculated\ by\ the\ given\ values.\r\n
comment34.params=maxValue\ absoluteValues\ width\ height\ backgroundColor\ lineColor
comment34.target=greenfoot.GreenfootImage\ createLineChart(double,\ java.awt.Point[],\ int,\ int,\ java.awt.Color,\ java.awt.Color)
comment34.text=\r\n\ Creates\ a\ line\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ line\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ point\ of\ the\ line\ chart\ as\ absolute\ values.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ backgroundColor\r\n\ \ \ \ \ \ The\ background\ color\ of\ the\ whole\ chart.\r\n\ \r\n\ @param\ lineColor\r\n\ \ \ \ \ \ The\ color\ of\ the\ line.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ line\ chart\ calculated\ by\ the\ given\ values.\r\n
comment35.params=maxValue\ absoluteValues\ width\ height\ backgroundColor\ lineColor\ frameColor\ frameWidth
comment35.target=greenfoot.GreenfootImage\ createLineChart(double,\ java.awt.Point[],\ int,\ int,\ java.awt.Color,\ java.awt.Color,\ java.awt.Color,\ int)
comment35.text=\r\n\ Creates\ a\ line\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ line\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ point\ of\ the\ line\ chart\ as\ absolute\ values.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ backgroundColor\r\n\ \ \ \ \ \ The\ background\ color\ of\ the\ whole\ chart.\r\n\ \r\n\ @param\ lineColor\r\n\ \ \ \ \ \ The\ color\ of\ the\ line.\r\n\ \r\n\ @param\ frameColor\r\n\ \ \ \ \ \ The\ color\ of\ the\ frame\ (if\ there\ is\ one).\r\n\ \r\n\ @param\ frameWidth\r\n\ \ \ \ \ \ The\ width\ of\ the\ frame\ (0\ \=\ no\ frame).\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ line\ chart\ calculated\ by\ the\ given\ values.\r\n
comment36.params=maxValue\ absoluteValues\ width\ height
comment36.target=greenfoot.GreenfootImage\ createPointChart(double,\ java.awt.Point[],\ int,\ int)
comment36.text=\r\n\ Creates\ a\ point\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ point\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ point\ as\ absolute\ values.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ point\ chart\ calculated\ by\ the\ given\ values.\r\n
comment37.params=maxValue\ absoluteValues\ width\ height\ pointColor
comment37.target=greenfoot.GreenfootImage\ createPointChart(double,\ java.awt.Point[],\ int,\ int,\ java.awt.Color)
comment37.text=\r\n\ Creates\ a\ point\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ point\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ point\ as\ absolute\ values.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ pointColor\r\n\ \ \ \ \ \ The\ color\ of\ the\ points.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ point\ chart\ calculated\ by\ the\ given\ values.\r\n
comment38.params=maxValue\ absoluteValues\ width\ height\ backgroundColor\ pointColor
comment38.target=greenfoot.GreenfootImage\ createPointChart(double,\ java.awt.Point[],\ int,\ int,\ java.awt.Color,\ java.awt.Color)
comment38.text=\r\n\ Creates\ a\ point\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ point\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ point\ as\ absolute\ values.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ backgroundColor\r\n\ \ \ \ \ \ The\ background\ color\ of\ the\ whole\ chart.\r\n\ \r\n\ @param\ pointColor\r\n\ \ \ \ \ \ The\ color\ of\ the\ points.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ point\ chart\ calculated\ by\ the\ given\ values.\r\n
comment39.params=maxValue\ absoluteValues\ width\ height\ backgroundColor\ pointColor\ frameColor\ frameWidth
comment39.target=greenfoot.GreenfootImage\ createPointChart(double,\ java.awt.Point[],\ int,\ int,\ java.awt.Color,\ java.awt.Color,\ java.awt.Color,\ int)
comment39.text=\r\n\ Creates\ a\ point\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ point\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ point\ as\ absolute\ values.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ backgroundColor\r\n\ \ \ \ \ \ The\ background\ color\ of\ the\ whole\ chart.\r\n\ \r\n\ @param\ pointColor\r\n\ \ \ \ \ \ The\ color\ of\ the\ points.\r\n\ \r\n\ @param\ frameColor\r\n\ \ \ \ \ \ The\ color\ of\ the\ frame\ (if\ there\ is\ one).\r\n\ \r\n\ @param\ frameWidth\r\n\ \ \ \ \ \ The\ width\ of\ the\ frame\ (0\ \=\ no\ frame).\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ point\ chart\ calculated\ by\ the\ given\ values.\r\n
comment4.params=filename\ addToExistingFile\ fileText
comment4.target=boolean\ saveFile(java.lang.String,\ boolean,\ java.util.List)
comment4.text=\r\n\ Saves\ the\ Strings\ given\ as\ the\ second\ to\ the\ last\ parameter\ in\ the\ file\ named\ like\ given\ in\ filename.\r\n\ \r\n\ @param\ filename\r\n\ \ \ \ \ \ The\ name\ of\ the\ file\ where\ the\ Strings\ should\ be\ saved.\r\n\ \r\n\ @param\ addToExistingFile\r\n\ \ \ \ \ \ If\ you\ want\ to\ add\ the\ text\ to\ an\ existing\ file\ this\ variable\ has\ to\ be\ true;\r\n\ \r\n\ @param\ fileText\r\n\ \ \ \ \ \ The\ strings\ that\ should\ be\ saved\ in\ the\ file\ as\ a\ list.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ true\ if\ the\ file\ was\ successfully\ createt.\ False\ if\ not.\r\n
comment40.params=maxValue\ absoluteValues\ width\ height
comment40.target=greenfoot.GreenfootImage\ createSurfaceChart(double,\ java.awt.Point[],\ int,\ int)
comment40.text=\r\n\ Creates\ a\ surface\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ point\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ point\ as\ absolute\ values.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ surface\ chart\ calculated\ by\ the\ given\ values.\r\n
comment41.params=maxValue\ absoluteValues\ width\ height\ surfaceColor
comment41.target=greenfoot.GreenfootImage\ createSurfaceChart(double,\ java.awt.Point[],\ int,\ int,\ java.awt.Color)
comment41.text=\r\n\ Creates\ a\ surface\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ point\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ point\ as\ absolute\ values.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ surfaceColor\r\n\ \ \ \ \ \ The\ color\ of\ the\ surface.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ surface\ chart\ calculated\ by\ the\ given\ values.\r\n
comment42.params=maxValue\ absoluteValues\ width\ height\ backgroundColor\ surfaceColor
comment42.target=greenfoot.GreenfootImage\ createSurfaceChart(double,\ java.awt.Point[],\ int,\ int,\ java.awt.Color,\ java.awt.Color)
comment42.text=\r\n\ Creates\ a\ surface\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ point\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ point\ as\ absolute\ values.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ backgroundColor\r\n\ \ \ \ \ \ The\ background\ color\ of\ the\ whole\ chart.\r\n\ \r\n\ @param\ surfaceColor\r\n\ \ \ \ \ \ The\ color\ of\ the\ surface.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ surface\ chart\ calculated\ by\ the\ given\ values.\r\n
comment43.params=maxValue\ absoluteValues\ width\ height\ backgroundColor\ surfaceColor\ frameColor\ frameWidth
comment43.target=greenfoot.GreenfootImage\ createSurfaceChart(double,\ java.awt.Point[],\ int,\ int,\ java.awt.Color,\ java.awt.Color,\ java.awt.Color,\ int)
comment43.text=\r\n\ Creates\ a\ surface\ chart\ with\ the\ given\ values\ for\ the\ max\ height,\ absolute\ values,\ ...\r\n\ \r\n\ @param\ maxValue\r\n\ \ \ \ \ \ The\ maximum\ value\ that\ the\ point\ chart\ can\ reach.\r\n\ \r\n\ @param\ absoluteValues\r\n\ \ \ \ \ \ The\ values\ for\ each\ point\ as\ absolute\ values.\r\n\ \r\n\ @param\ width\r\n\ \ \ \ \ \ The\ width\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ width\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ height\r\n\ \ \ \ \ \ The\ height\ of\ the\ chart\ itselves.\ This\ value\ is\ not\ the\ height\ of\ the\ whole\ image.\r\n\ \r\n\ @param\ backgroundColor\r\n\ \ \ \ \ \ The\ background\ color\ of\ the\ whole\ chart.\r\n\ \r\n\ @param\ surfaceColor\r\n\ \ \ \ \ \ The\ color\ of\ the\ surface.\r\n\ \r\n\ @param\ frameColor\r\n\ \ \ \ \ \ The\ color\ of\ the\ frame\ (if\ there\ is\ one).\r\n\ \r\n\ @param\ frameWidth\r\n\ \ \ \ \ \ The\ width\ of\ the\ frame\ (0\ \=\ no\ frame).\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ GreenfootImage\ with\ a\ surface\ chart\ calculated\ by\ the\ given\ values.\r\n
comment44.params=rotationPoint\ rotatedActor\ angle
comment44.target=void\ rotateArroundPoint(java.awt.Point,\ greenfoot.Actor,\ double)
comment44.text=\r\n\ Rotates\ an\ Actor\ arround\ a\ given\ point.\r\n\ \r\n\ @param\ rotationPoint\r\n\ \ \ \ \ \ The\ point\ arround\ which\ the\ Actor\ is\ rotated.\r\n\ \r\n\ @param\ rotatedActor\r\n\ \ \ \ \ \ The\ Actor\ that\ is\ rotated\ arround\ a\ point.\r\n\ \r\n\ @param\ angle\r\n\ \ \ \ \ \ The\ absolute\ angle\ the\ actor\ should\ be\ rotated.\r\n\ \ \ \ \ \ With\ 0\ as\ a\ rotation\ to\ the\ right\ hand\ side\ and\ going\ on\ clockwise.\r\n\ \r\n\ @throws\r\n\ \ \ \ \ \ NullPointerException\ is\ thrown\ if\ rotatedActor\ or\ rotationPoint\ is\ null.\r\n
comment45.params=actor\ distance
comment45.target=void\ move(greenfoot.Actor,\ double)
comment45.text=\r\n\ Make\ the\ given\ Actor\ move\ the\ given\ distance.\r\n\ \r\n\ @param\ actor\r\n\ \ \ \ \ \ The\ Actor\ that\ is\ moved.\r\n\ \r\n\ @param\ distance\r\n\ \ \ \ \ \ The\ distance\ the\ Actor\ is\ moved.\r\n\ \r\n\ @throws\r\n\ \ \ \ \ \ NullPointerException\ is\ thrown\ if\ the\ Actor\ is\ null.\r\n
comment46.params=actor\ angle\ distance
comment46.target=void\ move(greenfoot.Actor,\ double,\ double)
comment46.text=\r\n\ Make\ the\ given\ Actor\ move\ the\ given\ distance\ into\ a\ given\ direction.\r\n\ \r\n\ @param\ actor\r\n\ \ \ \ \ \ The\ Actor\ that\ is\ moved.\r\n\ \r\n\ @param\ angle\r\n\ \ \ \ \ \ The\ angle\ to\ which\ the\ actor\ should\ be\ moved.\r\n\ \r\n\ @param\ distance\r\n\ \ \ \ \ \ The\ distance\ the\ Actor\ is\ moved.\r\n\ \r\n\ @throws\r\n\ \ \ \ \ \ NullPointerException\ is\ thrown\ if\ the\ Actor\ is\ null.\r\n
comment47.params=currentX\ currentY\ angle\ distance
comment47.target=double[]\ move(double,\ double,\ double,\ double)
comment47.text=\r\n\ The\ position\ of\ an\ Actor\ that\ is\ moved\ the\ given\ distance\ into\ the\ given\ direction.\r\n\ \r\n\ @param\ currentX\r\n\ \ \ \ \ \ The\ current\ x\ coordinate\ of\ the\ actor.\r\n\ \r\n\ @param\ currentY\r\n\ \ \ \ \ \ The\ current\ y\ coordinate\ of\ the\ actor.\r\n\ \r\n\ @param\ angle\r\n\ \ \ \ \ \ The\ angle\ to\ which\ the\ actor\ should\ be\ moved.\r\n\ \r\n\ @param\ distance\r\n\ \ \ \ \ \ The\ distance\ the\ actor\ should\ be\ moved.\r\n\ \r\n\ @return\ \r\n\ \ \ \ \ \ Returns\ the\ new\ coordinates\ of\ the\ actor\ as\ a\ double\ array.\r\n
comment48.params=actor
comment48.target=void\ bounceOffWorldEdge(greenfoot.Actor)
comment48.text=\r\n\ Let\ the\ actor\ bounce\ of\ of\ the\ world\ edge.\r\n\ \r\n\ @param\ actor\r\n\ \ \ \ \ \ The\ actor\ that\ should\ bounce\ off\ at\ the\ worlds\ edge.\r\n
comment49.params=p1\ p2
comment49.target=double\ getAngle(java.awt.Point,\ java.awt.Point)
comment49.text=\r\n\ Calculate\ the\ angle\ from\ the\ first\ to\ the\ second\ point.\r\n\ \r\n\ @param\ p1\r\n\ \ \ \ \ \ The\ first\ point.\r\n\ \r\n\ @param\ p2\r\n\ \ \ \ \ \ The\ second\ point.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ the\ angle\ from\ the\ first\ to\ the\ second\ point.\r\n
comment5.params=filename
comment5.target=java.util.List\ loadFile(java.lang.String)
comment5.text=\r\n\ Loads\ the\ text\ of\ the\ file\ whith\ the\ given\ filename.\r\n\ \r\n\ @param\ filename\r\n\ \ \ \ \ \ The\ name\ of\ the\ file\ that\ should\ be\ loaded.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ a\ list\ of\ Strings\ consisting\ of\ the\ text\ of\ the\ file.\r\n\ \ \ \ \ \ Each\ line\ of\ the\ file\ is\ a\ new\ element\ of\ the\ list.\r\n
comment50.params=actor\ x\ y
comment50.target=void\ turnTo(greenfoot.Actor,\ double,\ double)
comment50.text=\r\n\ Make\ the\ given\ actor\ turn\ to\ a\ given\ point.\r\n\ \r\n\ @param\ actor\r\n\ \ \ \ \ \ The\ actor\ that\ should\ be\ truned.\r\n\ \r\n\ @param\ x\r\n\ \ \ \ \ \ The\ x\ coordinate\ of\ the\ point\ the\ actor\ should\ turn\ to.\r\n\ \r\n\ @param\ y\r\n\ \ \ \ \ \ The\ y\ coordinate\ of\ the\ point\ the\ actor\ should\ turn\ to.\r\n
comment51.params=actor\ x\ y
comment51.target=double\ directionToTurnTo(greenfoot.Actor,\ double,\ double)
comment51.text=\r\n\ The\ angle\ the\ actor\ must\ turn\ to\ look\ in\ the\ direction\ of\ the\ point.\r\n\ \r\n\ @param\ actor\r\n\ \ \ \ \ \ The\ actor\ that\ should\ be\ truned.\r\n\ \r\n\ @param\ x\r\n\ \ \ \ \ \ The\ x\ coordinate\ of\ the\ point\ the\ actor\ should\ turn\ to.\r\n\ \r\n\ @param\ y\r\n\ \ \ \ \ \ The\ y\ coordinate\ of\ the\ point\ the\ actor\ should\ turn\ to.\r\n
comment52.params=deltaX\ deltaY
comment52.target=double\ direction(double,\ double)
comment52.text=\r\n\ The\ angle\ the\ actor\ must\ turn\ to\ look\ in\ the\ direction\ of\ a\ point\ given\ as\ the\ vectors\ from\ the\ current\ location.\r\n\ \r\n\ @param\ actor\r\n\ \ \ \ \ \ The\ actor\ that\ should\ be\ truned.\r\n\ \r\n\ @param\ deltaX\r\n\ \ \ \ \ \ The\ change\ in\ X\ direction\ of\ the\ point\ the\ actor\ should\ turn\ to.\r\n\ \r\n\ @param\ deltaY\r\n\ \ \ \ \ \ The\ change\ in\ Y\ direction\ of\ the\ point\ the\ actor\ should\ turn\ to.\r\n
comment53.params=actor\ deltaX\ deltaY
comment53.target=void\ setDirection(greenfoot.Actor,\ double,\ double)
comment53.text=\r\n\ Make\ the\ given\ actor\ turn\ to\ a\ point\ given\ as\ the\ vectors\ from\ the\ current\ location.\r\n\ \r\n\ @param\ actor\r\n\ \ \ \ \ \ The\ actor\ that\ should\ be\ truned.\r\n\ \r\n\ @param\ deltaX\r\n\ \ \ \ \ \ The\ change\ in\ X\ direction\ of\ the\ point\ the\ actor\ should\ turn\ to.\r\n\ \r\n\ @param\ deltaY\r\n\ \ \ \ \ \ The\ change\ in\ Y\ direction\ of\ the\ point\ the\ actor\ should\ turn\ to.\r\n
comment54.params=command
comment54.target=void\ exec(java.lang.String)
comment54.text=\r\n\ Execute\ a\ DOS\ command.\r\n\ \r\n\ @param\ commend\r\n\ \ \ \ \ \ The\ command\ that\ should\ be\ executed.\r\n
comment55.params=actor
comment55.target=boolean\ atWorldEdge(greenfoot.Actor)
comment55.text=\r\n\ Check\ whether\ the\ actor\ is\ at\ the\ edge\ of\ the\ world.\r\n\ \r\n\ @param\ actor\r\n\ \ \ \ \ \ The\ actor\ that\ is\ checked.\r\n\ \r\n\ @return\ \r\n\ \ \ \ \ \ Returs\ true\ if\ the\ actor\ is\ not\ more\ that\ 20px\ away\ from\ the\ worlds\ edge.\r\n\ \r\n\ @throws\r\n\ \ \ \ \ \ NullPointerException\ is\ thrown\ if\ the\ actor\ is\ null\ or\ if\ it\ doesn't\ exist\ in\ a\ world.\r\n
comment56.params=actor
comment56.target=boolean\ mouseOnObject(greenfoot.Actor)
comment56.text=\r\n\ Check\ whether\ the\ mouse\ is\ currently\ on\ the\ image\ of\ an\ Actor.\r\n\ \r\n\ @param\ actor\r\n\ \ \ \ \ \ The\ checked\ actor.\r\n\ \r\n\ @return\ \r\n\ \ \ \ \ \ Returns\ true\ if\ the\ mouse\ is\ on\ the\ image\ of\ the\ actor.\r\n
comment57.params=
comment57.target=boolean\ playingOnline()
comment57.text=\r\n\ Check\ whether\ the\ game\ is\ played\ online\ (on\ the\ Greenfoot\ webside)\ or\ offline.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ true\ if\ the\ game\ is\ currently\ played\ online.\r\n
comment58.params=value\ decimalPlaces
comment58.target=double\ round(double,\ int)
comment58.text=\r\n\ Round\ a\ double\ value\ to\ a\ variable\ number\ of\ decimal\ plases.\r\n\ \r\n\ @param\ value\r\n\ \ \ \ \ \ The\ double\ value\ that\ should\ be\ rounded.\r\n\ \r\n\ @param\ decimalPlaces\r\n\ \ \ \ \ \ The\ number\ of\ decimal\ places\ you\ want\ to\ round\ the\ double\ value\ to.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ The\ double\ value\ roundet\ to\ the\ given\ number\ of\ decimal\ places.\r\n
comment59.params=p1\ p2\ angle1\ angle2
comment59.target=double[]\ calculateCrossingPointByAngle(java.awt.Point,\ java.awt.Point,\ double,\ double)
comment59.text=\r\n\ Calculates\ the\ crossing\ point\ of\ two\ lines\ that\ are\ calculated\ by\ a\ point\ of\ each\ line\ and\ the\ angle\ of\ each\ line.\r\n\ \r\n\ @param\ p1\r\n\ \ \ \ \ \ Any\ point\ of\ the\ first\ line.\r\n\ \r\n\ @param\ p2\r\n\ \ \ \ \ \ Any\ point\ of\ the\ second\ line.\r\n\ \r\n\ @param\ angle1\r\n\ \ \ \ \ \ The\ angle\ of\ the\ first\ line\ in\ degrees\ (0\ \=>\ vertical\ line,\ 90\ \=>\ horizontal\ line).\r\n\ \r\n\ @param\ angle2\r\n\ \ \ \ \ \ The\ angle\ of\ the\ second\ line\ in\ degrees\ (0\ \=>\ vertical\ line,\ 90\ \=>\ horizontal\ line).\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ The\ coordinates\ of\ the\ crossing\ point\ of\ the\ two\ lines\ as\ a\ double\ array.\r\n
comment6.params=filename
comment6.target=boolean\ deleteFile(java.lang.String)
comment6.text=\r\n\ Deletes\ the\ content\ of\ a\ file.\r\n\ \r\n\ @param\ filename\r\n\ \ \ \ \ \ The\ name\ of\ the\ file\ that\ should\ be\ deleted.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ true\ if\ the\ file\ has\ ben\ deleted\ or\ if\ the\ file\ didn't\ exist.\r\n\ \ \ \ \ \ Returns\ false\ if\ the\ file\ couldn't\ be\ deleted.\r\n
comment60.params=p1\ p2\ slope1\ slope2
comment60.target=double[]\ calculateCrossingPointBySlope(java.awt.Point,\ java.awt.Point,\ double,\ double)
comment60.text=\r\n\ Calculates\ the\ crossing\ point\ of\ two\ lines\ that\ are\ calculated\ by\ a\ point\ of\ each\ line\ and\ the\ slope\ of\ each\ line.\r\n\ \r\n\ @param\ p1\r\n\ \ \ \ \ \ Any\ point\ of\ the\ first\ line.\r\n\ \r\n\ @param\ p2\r\n\ \ \ \ \ \ Any\ point\ of\ the\ second\ line.\r\n\ \r\n\ @param\ angle1\r\n\ \ \ \ \ \ The\ slope\ of\ the\ first\ line.\r\n\ \r\n\ @param\ angle2\r\n\ \ \ \ \ \ The\ slope\ of\ the\ second\ line.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ The\ coordinates\ of\ the\ crossing\ point\ of\ the\ two\ lines\ as\ a\ double\ array.\r\n
comment7.params=filename
comment7.target=boolean\ fileExisting(java.lang.String)
comment7.text=\r\n\ Check\ whether\ a\ file\ with\ the\ given\ name\ is\ currently\ existing.\r\n\ \r\n\ @param\ filename\r\n\ \ \ \ \ \ The\ name\ of\ the\ file\ that\ should\ be\ checked.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ Returns\ true\ if\ the\ file\ is\ existing.\r\n\ \ \ \ \ \ Returns\ false\ if\ the\ file\ is\ not\ found\ or\ if\ there\ was\ a\ IOException.\r\n
comment8.params=path
comment8.target=java.util.List\ getExistingFileNames(java.lang.String)
comment8.text=\r\n\ Returns\ a\ list\ of\ Strings\ concerning\ the\ names\ of\ all\ existing\ files\ in\ the\ choosen\ directiory.\r\n
comment9.params=path
comment9.target=java.util.List\ getExistingFiles(java.lang.String)
comment9.text=\r\n\ Returns\ a\ list\ of\ all\ files\ in\ the\ choosen\ directory.\r\n
numComments=61
